
bin\Debug\Bot_SPlevel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000005fa  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  000005fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000103  00000000  00000000  0000061d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000297  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011e  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000532  00000000  00000000  00000ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e0  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_23>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_29>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b1 07       	cpc	r27, r17
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  cc:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <__vector_23>:
unsigned char ADC_Mesure_Compleated = 0x00;
unsigned char ISR_Occured=0x00;
uint16_t ADC_Val=0x0000;

ISR(TIMER0_OVF_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
    ISR_Occured=0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	80 93 01 01 	sts	0x0101, r24
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_29>:

ISR(ADC_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
    ADC_Mesure_Compleated=0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	80 93 00 01 	sts	0x0100, r24
}
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <add_to_enable_hibbernetes>:

void add_to_enable_hibbernetes(void)
{
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62

}
 130:	cf 91       	pop	r28
 132:	df 91       	pop	r29
 134:	08 95       	ret

00000136 <add_to_disable_hibbernetes>:

void add_to_disable_hibbernetes(void)
{
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62

}
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	08 95       	ret

00000144 <add_to_main>:

void add_to_main(void)
{
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62

}
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <adc_measure_init>:

void adc_measure_init(unsigned char channel)
{
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
	//unsigned int result=0;

	ADMUX = 0;
 15e:	ec e7       	ldi	r30, 0x7C	; 124
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	10 82       	st	Z, r1
	ADMUX &= ~(1<<REFS1)&~(1<<REFS0);			//ext. AREF = 5V
 164:	ac e7       	ldi	r26, 0x7C	; 124
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	ec e7       	ldi	r30, 0x7C	; 124
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 73       	andi	r24, 0x3F	; 63
 170:	8c 93       	st	X, r24
	ADMUX &= ~(1<<ADLAR);						//Right Adjusted 10bit
 172:	ac e7       	ldi	r26, 0x7C	; 124
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	8f 7d       	andi	r24, 0xDF	; 223
 17e:	8c 93       	st	X, r24

	ADCSRB &= ~(1<<MUX5);
 180:	ab e7       	ldi	r26, 0x7B	; 123
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	eb e7       	ldi	r30, 0x7B	; 123
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	8f 7d       	andi	r24, 0xDF	; 223
 18c:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX4)&~(1<<MUX3)&~(1<<MUX2)&~(1<<MUX1);
 18e:	ac e7       	ldi	r26, 0x7C	; 124
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	ec e7       	ldi	r30, 0x7C	; 124
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	81 7e       	andi	r24, 0xE1	; 225
 19a:	8c 93       	st	X, r24
	ADMUX |= channel;
 19c:	ac e7       	ldi	r26, 0x7C	; 124
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	ec e7       	ldi	r30, 0x7C	; 124
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	89 2b       	or	r24, r25
 1aa:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE)|(1<<ADIF);	//ADC Enable, Prescaler 128 -> 125kHz Samplingfrequenzy
 1ac:	aa e7       	ldi	r26, 0x7A	; 122
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	ea e7       	ldi	r30, 0x7A	; 122
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8f 69       	ori	r24, 0x9F	; 159
 1b8:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADSC);						//start
 1ba:	aa e7       	ldi	r26, 0x7A	; 122
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	ea e7       	ldi	r30, 0x7A	; 122
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	8c 93       	st	X, r24
	//ADCSRA=0xC8;
	//while(ADCSRA&(1<<ADSC));					//wate till completion -- is remouved

}
 1c8:	0f 90       	pop	r0
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	08 95       	ret

000001d0 <adc_val_update>:

void adc_val_update(void)
{
 1d0:	df 93       	push	r29
 1d2:	cf 93       	push	r28
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <adc_val_update+0x6>
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
    	uint8_t adcl_tmp=0x00, adch_tmp=0x00;
 1da:	1a 82       	std	Y+2, r1	; 0x02
 1dc:	19 82       	std	Y+1, r1	; 0x01
        adcl_tmp=ADCL;
 1de:	e8 e7       	ldi	r30, 0x78	; 120
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8a 83       	std	Y+2, r24	; 0x02
        adch_tmp=ADCH;
 1e6:	e9 e7       	ldi	r30, 0x79	; 121
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	89 83       	std	Y+1, r24	; 0x01
        ADC_Val=(adch_tmp<<8)|adcl_tmp;
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	38 2f       	mov	r19, r24
 1f6:	22 27       	eor	r18, r18
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	88 2f       	mov	r24, r24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	82 2b       	or	r24, r18
 200:	93 2b       	or	r25, r19
 202:	90 93 03 01 	sts	0x0103, r25
 206:	80 93 02 01 	sts	0x0102, r24
}
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	cf 91       	pop	r28
 210:	df 91       	pop	r29
 212:	08 95       	ret

00000214 <main>:

int main(void)
{
 214:	df 93       	push	r29
 216:	cf 93       	push	r28
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	27 97       	sbiw	r28, 0x07	; 7
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61

    // Clk
    CLKPR=0x80;
 228:	e1 e6       	ldi	r30, 0x61	; 97
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	80 83       	st	Z, r24
    CLKPR=0x00;
 230:	e1 e6       	ldi	r30, 0x61	; 97
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	10 82       	st	Z, r1
    //Disable Jtag
    MCUCR |= (1<<JTD);
 236:	a5 e5       	ldi	r26, 0x55	; 85
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e5 e5       	ldi	r30, 0x55	; 85
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 68       	ori	r24, 0x80	; 128
 242:	8c 93       	st	X, r24
	MCUCR |= (1<<JTD);
 244:	a5 e5       	ldi	r26, 0x55	; 85
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e5 e5       	ldi	r30, 0x55	; 85
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	8c 93       	st	X, r24

    //Timer 0 Setup
    TCCR0A=0x00;
 252:	e4 e4       	ldi	r30, 0x44	; 68
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	10 82       	st	Z, r1
    TCCR0B=0x04;
 258:	e5 e4       	ldi	r30, 0x45	; 69
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	80 83       	st	Z, r24
    TIMSK0=0x01;
 260:	ee e6       	ldi	r30, 0x6E	; 110
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
//0x3F
    DDRB=0xFF;
 268:	e4 e2       	ldi	r30, 0x24	; 36
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	80 83       	st	Z, r24
    PORTB=0x1F;
 270:	e5 e2       	ldi	r30, 0x25	; 37
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	80 83       	st	Z, r24
//0x40
    DDRD=0xFF;
 278:	ea e2       	ldi	r30, 0x2A	; 42
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 83       	st	Z, r24
    PORTD=0x00;
 280:	eb e2       	ldi	r30, 0x2B	; 43
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	10 82       	st	Z, r1

    //Timer4 HardwarePWM Setup
    TCCR4A = TCCR4A | (1<<PWM4B);
 286:	a0 ec       	ldi	r26, 0xC0	; 192
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e0 ec       	ldi	r30, 0xC0	; 192
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	81 60       	ori	r24, 0x01	; 1
 292:	8c 93       	st	X, r24
	TCCR4C = TCCR4C | (1<<PWM4D);
 294:	a2 ec       	ldi	r26, 0xC2	; 194
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	e2 ec       	ldi	r30, 0xC2	; 194
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	8c 93       	st	X, r24
	TCCR4D = TCCR4D &~(1<<WGM41);
 2a2:	a3 ec       	ldi	r26, 0xC3	; 195
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e3 ec       	ldi	r30, 0xC3	; 195
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	8d 7f       	andi	r24, 0xFD	; 253
 2ae:	8c 93       	st	X, r24
	TCCR4D = TCCR4D &~(1<<WGM40);		//Fast PWM on OC4B and OC4D
 2b0:	a3 ec       	ldi	r26, 0xC3	; 195
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	e3 ec       	ldi	r30, 0xC3	; 195
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	8e 7f       	andi	r24, 0xFE	; 254
 2bc:	8c 93       	st	X, r24

	TCCR4A = TCCR4A &~(1<<COM4B0);
 2be:	a0 ec       	ldi	r26, 0xC0	; 192
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e0 ec       	ldi	r30, 0xC0	; 192
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8f 7e       	andi	r24, 0xEF	; 239
 2ca:	8c 93       	st	X, r24
	TCCR4A = TCCR4A | (1<<COM4B1);		//COM4B1:0=2
 2cc:	a0 ec       	ldi	r26, 0xC0	; 192
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e0 ec       	ldi	r30, 0xC0	; 192
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	80 62       	ori	r24, 0x20	; 32
 2d8:	8c 93       	st	X, r24

	TCCR4C = TCCR4C &~(1<<COM4D0);
 2da:	a2 ec       	ldi	r26, 0xC2	; 194
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e2 ec       	ldi	r30, 0xC2	; 194
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	8b 7f       	andi	r24, 0xFB	; 251
 2e6:	8c 93       	st	X, r24
	TCCR4C = TCCR4C | (1<<COM4D1);		//COM4D1:0=2
 2e8:	a2 ec       	ldi	r26, 0xC2	; 194
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e2 ec       	ldi	r30, 0xC2	; 194
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	88 60       	ori	r24, 0x08	; 8
 2f4:	8c 93       	st	X, r24

	TC4H = 0x03;
 2f6:	ef eb       	ldi	r30, 0xBF	; 191
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	80 83       	st	Z, r24
	OCR4C = 0xE8;						//f_PWM = f_CLK_T4/(1+OCR4C) = 62,5kHz/1000 = 62,5 Hz
 2fe:	e1 ed       	ldi	r30, 0xD1	; 209
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	88 ee       	ldi	r24, 0xE8	; 232
 304:	80 83       	st	Z, r24
	TC4H = 0x00;
 306:	ef eb       	ldi	r30, 0xBF	; 191
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	10 82       	st	Z, r1
	OCR4B = PWM_R_STOPP;				//Duty cycle on OC4B-Pin (PB6), PWM_right
 30c:	e0 ed       	ldi	r30, 0xD0	; 208
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	8e e5       	ldi	r24, 0x5E	; 94
 312:	80 83       	st	Z, r24
	OCR4D = PWM_L_STOPP;				//Duty cycle on OC4D-Pin (PD7), PWM_left
 314:	e2 ed       	ldi	r30, 0xD2	; 210
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	8e e5       	ldi	r24, 0x5E	; 94
 31a:	80 83       	st	Z, r24

	TCCR4B = TCCR4B | (1<<CS43);
 31c:	a1 ec       	ldi	r26, 0xC1	; 193
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	e1 ec       	ldi	r30, 0xC1	; 193
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	88 60       	ori	r24, 0x08	; 8
 328:	8c 93       	st	X, r24
	TCCR4B = TCCR4B &~(1<<CS42);
 32a:	a1 ec       	ldi	r26, 0xC1	; 193
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	e1 ec       	ldi	r30, 0xC1	; 193
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	8b 7f       	andi	r24, 0xFB	; 251
 336:	8c 93       	st	X, r24
	TCCR4B = TCCR4B &~(1<<CS41);		//f_CLK_T4 = CLK_IO/Prescaler = 16MHz/256 = 62,5kHz
 338:	a1 ec       	ldi	r26, 0xC1	; 193
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	e1 ec       	ldi	r30, 0xC1	; 193
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	8d 7f       	andi	r24, 0xFD	; 253
 344:	8c 93       	st	X, r24
	TCCR4B = TCCR4B | (1<<CS40);		//Timer4 Prescaler = 1, Start PWM
 346:	a1 ec       	ldi	r26, 0xC1	; 193
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	e1 ec       	ldi	r30, 0xC1	; 193
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	81 60       	ori	r24, 0x01	; 1
 352:	8c 93       	st	X, r24

	//Enable interupts
    sei();
 354:	78 94       	sei

    uint8_t ISR_Count=0x00;
 356:	1f 82       	std	Y+7, r1	; 0x07
    ADC_Val=1000;
 358:	88 ee       	ldi	r24, 0xE8	; 232
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	90 93 03 01 	sts	0x0103, r25
 360:	80 93 02 01 	sts	0x0102, r24

    uint8_t Hibbernetes=0x00;
 364:	1e 82       	std	Y+6, r1	; 0x06
    uint8_t HibberISRcount=0x00;
 366:	1d 82       	std	Y+5, r1	; 0x05

    uint8_t Engenus=94;
 368:	8e e5       	ldi	r24, 0x5E	; 94
 36a:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t Engine_Clk=0x00;
 36c:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t Engine_Rut=0x00;
 36e:	1a 82       	std	Y+2, r1	; 0x02

    //Engines
    //reight
    OCR4B=PWM_R_STOPP;
 370:	e0 ed       	ldi	r30, 0xD0	; 208
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	8e e5       	ldi	r24, 0x5E	; 94
 376:	80 83       	st	Z, r24
    //left
    OCR4D=PWM_L_STOPP;
 378:	e2 ed       	ldi	r30, 0xD2	; 210
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	8e e5       	ldi	r24, 0x5E	; 94
 37e:	80 83       	st	Z, r24

    unsigned char blnk_ind=0x00;
 380:	19 82       	std	Y+1, r1	; 0x01

    while(1)
    {
        if(ISR_Occured==0xFF)
 382:	80 91 01 01 	lds	r24, 0x0101
 386:	8f 3f       	cpi	r24, 0xFF	; 255
 388:	29 f4       	brne	.+10     	; 0x394 <main+0x180>
        {
            ISR_Occured=0x00;
 38a:	10 92 01 01 	sts	0x0101, r1
            ISR_Count=ISR_Count+1;
 38e:	8f 81       	ldd	r24, Y+7	; 0x07
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	8f 83       	std	Y+7, r24	; 0x07
        }

        if(ISR_Count==0xFF)
 394:	8f 81       	ldd	r24, Y+7	; 0x07
 396:	8f 3f       	cpi	r24, 0xFF	; 255
 398:	31 f4       	brne	.+12     	; 0x3a6 <main+0x192>
        {
            adc_measure_init(0);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 a9 00 	call	0x152	; 0x152 <adc_measure_init>
            ISR_Count=0x00;
 3a0:	1f 82       	std	Y+7, r1	; 0x07
            Engine_Clk=0xFF;
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	8b 83       	std	Y+3, r24	; 0x03
        }

        if(ADC_Mesure_Compleated==0xFF)
 3a6:	80 91 00 01 	lds	r24, 0x0100
 3aa:	8f 3f       	cpi	r24, 0xFF	; 255
 3ac:	21 f4       	brne	.+8      	; 0x3b6 <main+0x1a2>
        {
            ADC_Mesure_Compleated=0x00;
 3ae:	10 92 00 01 	sts	0x0100, r1

            adc_val_update();
 3b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <adc_val_update>
        }


        if(ADC_Val>=874)
 3b6:	80 91 02 01 	lds	r24, 0x0102
 3ba:	90 91 03 01 	lds	r25, 0x0103
 3be:	23 e0       	ldi	r18, 0x03	; 3
 3c0:	8a 36       	cpi	r24, 0x6A	; 106
 3c2:	92 07       	cpc	r25, r18
 3c4:	28 f0       	brcs	.+10     	; 0x3d0 <main+0x1bc>
        {
           PORTB=0x1F;
 3c6:	e5 e2       	ldi	r30, 0x25	; 37
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	8f e1       	ldi	r24, 0x1F	; 31
 3cc:	80 83       	st	Z, r24
 3ce:	98 c0       	rjmp	.+304    	; 0x500 <main+0x2ec>
        }
        else if(ADC_Val>=759&&ADC_Val<=873)
 3d0:	80 91 02 01 	lds	r24, 0x0102
 3d4:	90 91 03 01 	lds	r25, 0x0103
 3d8:	22 e0       	ldi	r18, 0x02	; 2
 3da:	87 3f       	cpi	r24, 0xF7	; 247
 3dc:	92 07       	cpc	r25, r18
 3de:	d8 f1       	brcs	.+118    	; 0x456 <main+0x242>
 3e0:	80 91 02 01 	lds	r24, 0x0102
 3e4:	90 91 03 01 	lds	r25, 0x0103
 3e8:	23 e0       	ldi	r18, 0x03	; 3
 3ea:	8a 36       	cpi	r24, 0x6A	; 106
 3ec:	92 07       	cpc	r25, r18
 3ee:	98 f5       	brcc	.+102    	; 0x456 <main+0x242>
        {
            //PORTB=0x2F;
            if(blnk_ind==1)
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	41 f4       	brne	.+16     	; 0x406 <main+0x1f2>
            {
                PORTB=0x21;
 3f6:	e5 e2       	ldi	r30, 0x25	; 37
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	81 e2       	ldi	r24, 0x21	; 33
 3fc:	80 83       	st	Z, r24
                blnk_ind=blnk_ind+1;
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	7d c0       	rjmp	.+250    	; 0x500 <main+0x2ec>
            }
            else if(blnk_ind==2)
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	41 f4       	brne	.+16     	; 0x41c <main+0x208>
            {
                PORTB=0x22;
 40c:	e5 e2       	ldi	r30, 0x25	; 37
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	82 e2       	ldi	r24, 0x22	; 34
 412:	80 83       	st	Z, r24
                blnk_ind=blnk_ind+1;
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	72 c0       	rjmp	.+228    	; 0x500 <main+0x2ec>
            }
            else if(blnk_ind==3)
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	41 f4       	brne	.+16     	; 0x432 <main+0x21e>
            {
                PORTB=0x24;
 422:	e5 e2       	ldi	r30, 0x25	; 37
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	84 e2       	ldi	r24, 0x24	; 36
 428:	80 83       	st	Z, r24
                blnk_ind=blnk_ind+1;
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	89 83       	std	Y+1, r24	; 0x01
 430:	67 c0       	rjmp	.+206    	; 0x500 <main+0x2ec>
            }
            else if(blnk_ind==4)
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	41 f4       	brne	.+16     	; 0x448 <main+0x234>
            {
                PORTB=0x28;
 438:	e5 e2       	ldi	r30, 0x25	; 37
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	88 e2       	ldi	r24, 0x28	; 40
 43e:	80 83       	st	Z, r24
                blnk_ind=blnk_ind+1;
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	8f 5f       	subi	r24, 0xFF	; 255
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	5c c0       	rjmp	.+184    	; 0x500 <main+0x2ec>
            }
            else{PORTB=0x2F;blnk_ind=1;}
 448:	e5 e2       	ldi	r30, 0x25	; 37
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	8f e2       	ldi	r24, 0x2F	; 47
 44e:	80 83       	st	Z, r24
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	89 83       	std	Y+1, r24	; 0x01
 454:	55 c0       	rjmp	.+170    	; 0x500 <main+0x2ec>
        }
        else if(ADC_Val<=758)
 456:	80 91 02 01 	lds	r24, 0x0102
 45a:	90 91 03 01 	lds	r25, 0x0103
 45e:	22 e0       	ldi	r18, 0x02	; 2
 460:	87 3f       	cpi	r24, 0xF7	; 247
 462:	92 07       	cpc	r25, r18
 464:	08 f0       	brcs	.+2      	; 0x468 <main+0x254>
 466:	4c c0       	rjmp	.+152    	; 0x500 <main+0x2ec>
        {
            Hibbernetes=1;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	8e 83       	std	Y+6, r24	; 0x06
            PORTB=0x00;
 46c:	e5 e2       	ldi	r30, 0x25	; 37
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	10 82       	st	Z, r1
            PORTB=0x20;
 472:	e5 e2       	ldi	r30, 0x25	; 37
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 e2       	ldi	r24, 0x20	; 32
 478:	80 83       	st	Z, r24
            //Engines Stop
            OCR4B=PWM_R_STOPP;
 47a:	e0 ed       	ldi	r30, 0xD0	; 208
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	8e e5       	ldi	r24, 0x5E	; 94
 480:	80 83       	st	Z, r24
            OCR4D=PWM_L_STOPP;
 482:	e2 ed       	ldi	r30, 0xD2	; 210
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	8e e5       	ldi	r24, 0x5E	; 94
 488:	80 83       	st	Z, r24
            TCNT4H = 0;
 48a:	ef eb       	ldi	r30, 0xBF	; 191
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	10 82       	st	Z, r1
            add_to_enable_hibbernetes();
 490:	0e 94 94 00 	call	0x128	; 0x128 <add_to_enable_hibbernetes>
 494:	30 c0       	rjmp	.+96     	; 0x4f6 <main+0x2e2>
            while(Hibbernetes==1)
            {
                if(ISR_Occured==0xFF)
 496:	80 91 01 01 	lds	r24, 0x0101
 49a:	8f 3f       	cpi	r24, 0xFF	; 255
 49c:	31 f4       	brne	.+12     	; 0x4aa <main+0x296>
                {
                    ISR_Occured=0x00;
 49e:	10 92 01 01 	sts	0x0101, r1
                    HibberISRcount=HibberISRcount+1;
 4a2:	8d 81       	ldd	r24, Y+5	; 0x05
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	8d 83       	std	Y+5, r24	; 0x05
 4a8:	26 c0       	rjmp	.+76     	; 0x4f6 <main+0x2e2>
                }
                else if(HibberISRcount>=64+64)
 4aa:	8d 81       	ldd	r24, Y+5	; 0x05
 4ac:	88 23       	and	r24, r24
 4ae:	8c f4       	brge	.+34     	; 0x4d2 <main+0x2be>
                {
                    if(PORTB==0x20)
 4b0:	e5 e2       	ldi	r30, 0x25	; 37
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	80 32       	cpi	r24, 0x20	; 32
 4b8:	21 f4       	brne	.+8      	; 0x4c2 <main+0x2ae>
                    {
                        PORTB=0x00;
 4ba:	e5 e2       	ldi	r30, 0x25	; 37
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	10 82       	st	Z, r1
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <main+0x2b6>
                    }
                    else{PORTB=0x20;}
 4c2:	e5 e2       	ldi	r30, 0x25	; 37
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	80 83       	st	Z, r24
                    adc_measure_init(0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 a9 00 	call	0x152	; 0x152 <adc_measure_init>
 4d0:	12 c0       	rjmp	.+36     	; 0x4f6 <main+0x2e2>
                }
                else if(ADC_Mesure_Compleated==0xFF)
 4d2:	80 91 00 01 	lds	r24, 0x0100
 4d6:	8f 3f       	cpi	r24, 0xFF	; 255
 4d8:	29 f4       	brne	.+10     	; 0x4e4 <main+0x2d0>
                {
                    ADC_Mesure_Compleated=0x00;
 4da:	10 92 00 01 	sts	0x0100, r1
                    adc_val_update();
 4de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <adc_val_update>
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <main+0x2e2>
                }
                else if(ADC_Val>=874){Hibbernetes=0;}
 4e4:	80 91 02 01 	lds	r24, 0x0102
 4e8:	90 91 03 01 	lds	r25, 0x0103
 4ec:	23 e0       	ldi	r18, 0x03	; 3
 4ee:	8a 36       	cpi	r24, 0x6A	; 106
 4f0:	92 07       	cpc	r25, r18
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <main+0x2e2>
 4f4:	1e 82       	std	Y+6, r1	; 0x06
            //Engines Stop
            OCR4B=PWM_R_STOPP;
            OCR4D=PWM_L_STOPP;
            TCNT4H = 0;
            add_to_enable_hibbernetes();
            while(Hibbernetes==1)
 4f6:	8e 81       	ldd	r24, Y+6	; 0x06
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	69 f2       	breq	.-102    	; 0x496 <main+0x282>
                    ADC_Mesure_Compleated=0x00;
                    adc_val_update();
                }
                else if(ADC_Val>=874){Hibbernetes=0;}
            }
            add_to_disable_hibbernetes();
 4fc:	0e 94 9b 00 	call	0x136	; 0x136 <add_to_disable_hibbernetes>
        }
        //---------------------Main Prog under This Text
        add_to_main();
 500:	0e 94 a2 00 	call	0x144	; 0x144 <add_to_main>

        //Engine Drive
        if(Engine_Clk==0xFF)
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	8f 3f       	cpi	r24, 0xFF	; 255
 508:	09 f0       	breq	.+2      	; 0x50c <main+0x2f8>
 50a:	3b cf       	rjmp	.-394    	; 0x382 <main+0x16e>
        {
            Engine_Clk=0x00;
 50c:	1b 82       	std	Y+3, r1	; 0x03
            if(Engine_Rut==0xFF)
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	8f 3f       	cpi	r24, 0xFF	; 255
 512:	49 f4       	brne	.+18     	; 0x526 <main+0x312>
            {
                if(Engenus>=125)
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	8d 37       	cpi	r24, 0x7D	; 125
 518:	10 f0       	brcs	.+4      	; 0x51e <main+0x30a>
                {
                    Engine_Rut=0x00;
 51a:	1a 82       	std	Y+2, r1	; 0x02
 51c:	13 c0       	rjmp	.+38     	; 0x544 <main+0x330>
                }
                else{Engenus=Engenus+1;}
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	8f 5f       	subi	r24, 0xFF	; 255
 522:	8c 83       	std	Y+4, r24	; 0x04
 524:	0f c0       	rjmp	.+30     	; 0x544 <main+0x330>
            }
            else if(Engine_Rut==0x00)
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	88 23       	and	r24, r24
 52a:	51 f4       	brne	.+20     	; 0x540 <main+0x32c>
            {
                if(Engenus<=62)
 52c:	8c 81       	ldd	r24, Y+4	; 0x04
 52e:	8f 33       	cpi	r24, 0x3F	; 63
 530:	18 f4       	brcc	.+6      	; 0x538 <main+0x324>
                {
                    Engine_Rut=0xFF;
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	8a 83       	std	Y+2, r24	; 0x02
 536:	06 c0       	rjmp	.+12     	; 0x544 <main+0x330>
                }
                else{Engenus=Engenus-1;}
 538:	8c 81       	ldd	r24, Y+4	; 0x04
 53a:	81 50       	subi	r24, 0x01	; 1
 53c:	8c 83       	std	Y+4, r24	; 0x04
 53e:	02 c0       	rjmp	.+4      	; 0x544 <main+0x330>
            }
            else{Engine_Rut=0xFF;}
 540:	8f ef       	ldi	r24, 0xFF	; 255
 542:	8a 83       	std	Y+2, r24	; 0x02

            TCNT4H=0;
 544:	ef eb       	ldi	r30, 0xBF	; 191
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	10 82       	st	Z, r1
            OCR4B=Engenus;
 54a:	e0 ed       	ldi	r30, 0xD0	; 208
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	8c 81       	ldd	r24, Y+4	; 0x04
 550:	80 83       	st	Z, r24
            TCNT4H=0;
 552:	ef eb       	ldi	r30, 0xBF	; 191
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	10 82       	st	Z, r1
            OCR4D=Engenus;
 558:	e2 ed       	ldi	r30, 0xD2	; 210
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	8c 81       	ldd	r24, Y+4	; 0x04
 55e:	80 83       	st	Z, r24
 560:	10 cf       	rjmp	.-480    	; 0x382 <main+0x16e>

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
