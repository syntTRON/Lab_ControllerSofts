
bin\Debug\Timer1PhaseAndFrequenzyCorrect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000048  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000138  00000000  00000000  0000024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c9  00000000  00000000  00000385  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000141  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b3  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_17>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 83 00 	call	0x106	; 0x106 <main>
  bc:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <__vector_17>:

#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER1_COMPA_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
    PORTB = ~PORTB;
  e0:	a5 e2       	ldi	r26, 0x25	; 37
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e2       	ldi	r30, 0x25	; 37
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 95       	com	r24
  ec:	8c 93       	st	X, r24
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:

int main(void)
{
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62

    CLKPR = 0x80;
 10e:	e1 e6       	ldi	r30, 0x61	; 97
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	80 83       	st	Z, r24
    CLKPR = 0x00;
 116:	e1 e6       	ldi	r30, 0x61	; 97
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	10 82       	st	Z, r1

    DDRB = 0xFF;
 11c:	e4 e2       	ldi	r30, 0x24	; 36
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	80 83       	st	Z, r24
    PORTB = 0x00;
 124:	e5 e2       	ldi	r30, 0x25	; 37
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	10 82       	st	Z, r1

    // Timer 1 Setup
    //TCCR1A = TCCR1A | (1<<WGM10);
    TCCR1B = TCCR1B | (1<<WGM13);
 12a:	a1 e8       	ldi	r26, 0x81	; 129
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 61       	ori	r24, 0x10	; 16
 136:	8c 93       	st	X, r24
    TCCR1B = TCCR1B | (1<<CS11);
 138:	a1 e8       	ldi	r26, 0x81	; 129
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	8c 93       	st	X, r24

    TIMSK1 = 0x02;
 146:	ef e6       	ldi	r30, 0x6F	; 111
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24
    sei();
 14e:	78 94       	sei

    ICR1 = 0x03E8;
 150:	e6 e8       	ldi	r30, 0x86	; 134
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	88 ee       	ldi	r24, 0xE8	; 232
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	91 83       	std	Z+1, r25	; 0x01
 15a:	80 83       	st	Z, r24
    OCR1A = 0x0064;
 15c:	e8 e8       	ldi	r30, 0x88	; 136
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	84 e6       	ldi	r24, 0x64	; 100
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	91 83       	std	Z+1, r25	; 0x01
 166:	80 83       	st	Z, r24
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0x62>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
