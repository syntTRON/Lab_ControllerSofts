
bin\Debug\Uebung6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000260  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000073  00000000  00000000  00000283  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000019c  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011e  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e0  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000cb  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_31>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b1 07       	cpc	r27, r17
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  cc:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <__vector_31>:

// Global Vars
uint8_t ovr = 0x00, mesurement = 0x00;

ISR(TIMER3_CAPT_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	00 d0       	rcall	.+0      	; 0xea <__vector_31+0x16>
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
    uint8_t lbyte, hbyte;
    hbyte = ICR3H;
  ee:	e7 e9       	ldi	r30, 0x97	; 151
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	89 83       	std	Y+1, r24	; 0x01
    lbyte = ICR3L;
  f6:	e6 e9       	ldi	r30, 0x96	; 150
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8a 83       	std	Y+2, r24	; 0x02
    if(ovr == 0xFF)
  fe:	80 91 00 01 	lds	r24, 0x0100
 102:	8f 3f       	cpi	r24, 0xFF	; 255
 104:	21 f4       	brne	.+8      	; 0x10e <__vector_31+0x3a>
    {
        hbyte = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	89 83       	std	Y+1, r24	; 0x01
        lbyte = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	8a 83       	std	Y+2, r24	; 0x02
    }

    //PORTB = lbyte;
    //PORTD = hbyte;
    PORTB = 0xFF;
 10e:	e5 e2       	ldi	r30, 0x25	; 37
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	80 83       	st	Z, r24
    mesurement = 0x00;
 116:	10 92 01 01 	sts	0x0101, r1

}
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <TIMER3_OVR_vect>:
ISR(TIMER3_OVR_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
 142:	df 93       	push	r29
 144:	cf 93       	push	r28
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
    ovr = 0xFF;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	80 93 00 01 	sts	0x0100, r24
    mesurement = 0x00;
 150:	10 92 01 01 	sts	0x0101, r1
    PORTB = 0xFF;
 154:	e5 e2       	ldi	r30, 0x25	; 37
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	80 83       	st	Z, r24

}
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <main>:

int main(void)
{
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	0f 92       	push	r0
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
    //Port C Setup
    DDRC = 0x00;
 17a:	e7 e2       	ldi	r30, 0x27	; 39
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	10 82       	st	Z, r1
    PORTC = 0x80;
 180:	e8 e2       	ldi	r30, 0x28	; 40
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	80 83       	st	Z, r24

    //Port D&B Setup
    DDRB = 0xFF;
 188:	e4 e2       	ldi	r30, 0x24	; 36
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
    DDRD = 0xFF;
 190:	ea e2       	ldi	r30, 0x2A	; 42
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	80 83       	st	Z, r24
    PORTB = 0xFF;
 198:	e5 e2       	ldi	r30, 0x25	; 37
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	80 83       	st	Z, r24


    //ClkIO setup 16mHz
    CLKPR = 0x80;
 1a0:	e1 e6       	ldi	r30, 0x61	; 97
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	80 83       	st	Z, r24
    CLKPR = 0x00;
 1a8:	e1 e6       	ldi	r30, 0x61	; 97
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	10 82       	st	Z, r1

    // Timer 3 Capture setup
    TCCR3B = 0x41;//0x47
 1ae:	e1 e9       	ldi	r30, 0x91	; 145
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	81 e4       	ldi	r24, 0x41	; 65
 1b4:	80 83       	st	Z, r24
    TIMSK3 = 0x21;
 1b6:	e1 e7       	ldi	r30, 0x71	; 113
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	81 e2       	ldi	r24, 0x21	; 33
 1bc:	80 83       	st	Z, r24

    sei();
 1be:	78 94       	sei


    while(1)
    {
        if(!PINC == 0x80 && mesurement == 0x00)
 1c0:	e6 e2       	ldi	r30, 0x26	; 38
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <main+0x50>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
